//controller function for user registration, login and user logout

import userModel from "../models/userModel.js";
import bcrypt from "bcrypt"; //encrypt password
import jwt from "jsonwebtoken"; //generate token for user authentication
//Import razorpay
import razorpay from "razorpay";
import transactionModel from "../models/transactionModel.js";


const registerUser = async (req,res)=>{
  try{

    const {name,email,password} = req.body;
    //check if user already exists
    if(!name || !email || !password){
      return res.json({success:false,message:"Missing required fields"});
    }

    //encrypt password

    const salt = await bcrypt.genSalt(10);  //moderate level of encryption more val means more secure but slow

    const hashedPassword = await bcrypt.hash(password,salt);

    const userData = {
      name,
      email,
      password : hashedPassword
    }

    const newUser = new userModel(userData);  //create new user 

    const user = await newUser.save(); // save to the database

    const token = jwt.sign({id:user._id},process.env.JWT_SECRET) //_id is auto generated by mongoDB

    res.json({success:true,token,user:{name:user.name}})
    

  }catch(error){
    console.log(error);
    res.json({success:false,message:error.message})
  }

}


const loginUser = async(req,res) =>{
  try{
    const{email,password} = req.body;

    const user = await userModel.findOne({email}); //find user by email

    if(!user){
      return res.json({success:false,message:"User not found"});
    }

    const isMatch = await bcrypt.compare(password, user.password); //compare entered password with hashed password

  if(isMatch){
    
    const token = jwt.sign({id:user._id},process.env.JWT_SECRET) //_id is auto generated by mongoDB
    return res.json({success:true,token,user:{name:user.name}}); //return token and user name

  }else{
    return res.json({success:false,message:"Invalid credentials"});
  }

  }catch(error){
    console.log(error);
    res.json({success:false,message:error.message})
  }
}

const userCredits = async(req,res)=>{
  try{
    // const {userId} = req.body; //using middleware we can get userId 

    const {userId} = req.user;

    const user = await userModel.findById(userId);
    res.json({success:true,credit : user.creditBalance,user:{name : user.name}});

  }catch(error){
    console.log(error);
    res.json({success:false,message:error.message});
  }
}

const razorpayInstance = new razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET
});

//controller fn for razorpay payment

const paymentRazorpay = async(req,res)=>{
  try{

    //userid and planId of user
    const {userId,planId} = req.body;
    //find user by id
    const userData = await userModel.findById(userId);

    if(!userId || !planId){
      return res.json({success:false,message:"Missing required fields"});
    }
    
    let credits,paln,amount,date 
    switch(planId){
      case 'Basic': 
        plan = "Basic"
        credits = 100
        amount = 10
        break;
      case 'Advanced': 
        plan = "Advanced"
        credits = 500
        amount = 50
        break;
      case 'Business': 
        plan = "Business"
        credits = 5000
        amount = 250
        break;
      default:
        return res.json({success:false,message:"Invalid planId"});
        
    } 

    date = Date.now();
    //object to store all transaction data and store in mongoDB
    
    const transactionData = {
      userId,plan,amount,credits,date
    }

    const newTransaction = await new transactionModel.create(transactionData);

    const options = {
      //order amt
      amount : amount*100, //in paise size razorpay works in paise
      currency : process.env.CURRENCY,
      receipt : newTransaction._id, //unique id for each transaction
    }

    //order details
    await razorpayInstance.orders.create(options,(error,order)=>{
      if(error){
        console.log(error);
        return res.json({success:false,message:"Something went wrong"});
      }
      res.json({success:true,message:"Order created successfully",order})
    })

  }catch(error){
    console.log(error);
    res.json({success:false,message:error.message});

  }
}


export  {registerUser,loginUser,userCredits,paymentRazorpay};